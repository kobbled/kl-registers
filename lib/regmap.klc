PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'type map to registers'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%defeval BASE_CLASSNAME class_name

%ifdef REGMAP_STRUCT
--define custom struct if supplied
REGMAP_STRUCT
%endif

%ifdef REGMAP_STRUCT_IMPORT
--import custom struct if specified
%mode push
%mode quote "$"
%eval $%include REGMAP_STRUCT_IMPORT$
%mode pop
%endif

CONST
  --tp functions
  FUNC_SET_REG  = 1
  FUNC_GET_REG  = 2

-- register type defines
%include register_types.klt
%include errors.klt

--regmap
%include regmap.klt

VAR
  func_ : INTEGER
  progname_ : STRING[32]
  varname_ : STRING[32]

%from registers.klh %import get_int, get_real, get_string, get_io, get_type_enum
%from pose.klh %import get_posreg_joint, get_posreg_xyz
%include registerstp.klh
%from tpe.klh %import get_int_arg, get_real_arg, get_string_arg, get_boolean_arg

%defeval class_name BASE_CLASSNAME

%include regmap.klh

-- **** DEFINED TEMPLATES

ROUTINE set_registers
  BEGIN
    REGMAPPGET
  END set_registers

ROUTINE get_registers

  BEGIN
    REGMAPPSET
  END get_registers

BEGIN
  --tpe class function
  func_ = tpe__get_int_arg(1)
  --tpe AR[2] progname
  progname_ = tpe__get_string_arg(2)
  --tpe AR[3] varname
  varname_ = tpe__get_string_arg(3)

  SELECT func_ OF
    CASE(FUNC_SET_REG):
      set_registers(progname_, varname_)
    CASE(FUNC_GET_REG):
      get_registers(progname_, varname_)
    ELSE:
  ENDSELECT

END class_name
