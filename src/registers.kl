PROGRAM registers
%NOLOCKGROUP

%include errors.klt

%include registers.klt
%include registers.klh
%include errors.klh

BEGIN
END registers

-- #########
-- Getters
-- #########

ROUTINE registers__get_type_enum
  BEGIN
    IF (typ_str='R') THEN RETURN(DATA_REG) ; ENDIF
    IF (typ_str='PR') THEN RETURN(DATA_POSREG) ; ENDIF
    IF (typ_str='SR') THEN RETURN(DATA_STRING) ; ENDIF
    IF (typ_str='F') THEN RETURN(io_flag) ; ENDIF
    IF (typ_str='DI') THEN RETURN(io_din) ; ENDIF
    IF (typ_str='DO') THEN RETURN(io_dout) ; ENDIF
    IF (typ_str='AI') THEN RETURN(io_anin) ; ENDIF
    IF (typ_str='AO') THEN RETURN(io_anout) ; ENDIF
    IF (typ_str='RI') THEN RETURN(io_rdi) ; ENDIF
    IF (typ_str='RO') THEN RETURN(io_rdo)  ; ENDIF
    IF (typ_str='GI') THEN RETURN(io_gpin) ; ENDIF
    IF (typ_str='GO') THEN RETURN(io_gpout)  ; ENDIF
    IF (typ_str='UI') THEN RETURN(io_uopin) ; ENDIF
    IF (typ_str='UO') THEN RETURN(io_uopout) ; ENDIF
    IF (typ_str='SI') THEN RETURN(io_sopin) ; ENDIF
    IF (typ_str='SO') THEN RETURN(io_sopout) ; ENDIF

    RETURN(0)
  END registers__get_type_enum

ROUTINE registers__get_type_name
  BEGIN
    IF (typ_str=DATA_REG) THEN RETURN('R') ; ENDIF
    IF (typ_str=DATA_POSREG) THEN RETURN('PR') ; ENDIF
    IF (typ_str=DATA_STRING) THEN RETURN('SR') ; ENDIF
    IF (typ_str=io_flag) THEN RETURN('F') ; ENDIF
    IF (typ_str=io_din) THEN RETURN('DI') ; ENDIF
    IF (typ_str=io_dout) THEN RETURN('DO') ; ENDIF
    IF (typ_str=io_anin) THEN RETURN('AI') ; ENDIF
    IF (typ_str=io_anout) THEN RETURN('AO') ; ENDIF
    IF (typ_str=io_rdi) THEN RETURN('RI') ; ENDIF
    IF (typ_str=io_rdo) THEN RETURN('RO')  ; ENDIF
    IF (typ_str=io_gpin) THEN RETURN('GI') ; ENDIF
    IF (typ_str=io_gpout) THEN RETURN('GO')  ; ENDIF
    IF (typ_str=io_uopin) THEN RETURN('UI') ; ENDIF
    IF (typ_str=io_uopout) THEN RETURN('UO') ; ENDIF
    IF (typ_str=io_sopin) THEN RETURN('SI') ; ENDIF
    IF (typ_str=io_sopout) THEN RETURN('SO') ; ENDIF

    RETURN('')
  END registers__get_type_name

-- return comments from registers and IO's 
-- specifying the register type and its number
ROUTINE registers__get_comment
  ------------------------------------
  VAR
    cmt : STRING[30]
    STATUS : INTEGER
  BEGIN

    IF typ = 0 THEN
      karelError(POS_TYPE_MISMATCH,'GET_CMT-wrong type', ER_ABORT)
      RETURN('')
    ENDIF

    SELECT typ OF
      CASE(DATA_REG):
        GET_REG_CMT(id, cmt, STATUS)
      CASE(DATA_POSREG):
        GET_PREG_CMT(id, cmt, STATUS)
      CASE(DATA_STRING):
        GET_SREG_CMT(id, cmt, STATUS)
      ELSE:
        GET_PORT_CMT(typ, id, cmt, STATUS)
    ENDSELECT

    CHK_STAT(STATUS)

    RETURN(cmt)
  END registers__get_comment

ROUTINE registers__get_io
  VAR
    STATUS : INTEGER
    val : INTEGER
  BEGIN

    IF (typ = 0) OR (typ = DATA_REG) OR (typ = DATA_POSREG) OR &
       (typ = DATA_STRING) THEN
      karelError(POS_TYPE_MISMATCH,'GET_PORT_VAL wrong type', ER_ABORT)
      RETURN(0)
    ENDIF

    GET_PORT_VAL(typ, port_no, val, STATUS)
    CHK_STAT(STATUS)

    RETURN(val)
  END registers__get_io

ROUTINE registers__get_boolean
  VAR
    bool_val : INTEGER
  BEGIN
    bool_val = registers__get_io(io_flag, flg_no)
    IF bool_val = 0 THEN
      RETURN(FALSE)
    ELSE
      RETURN(TRUE)
    ENDIF
  END registers__get_boolean

-- Public: get integer value for specified register
-- wrapper for GET_REG
-- returns the integer value of the register
ROUTINE registers__get_int
  VAR
    real_flg     :  BOOLEAN
    real_val    :  REAL
    int_val      : INTEGER
    STATUS   : INTEGER
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
    CHK_STAT(STATUS)
    IF real_flg = TRUE THEN
      int_val = TRUNC(real_val)
    ENDIF
      
    RETURN(int_val)
  END registers__get_int

-- Get real register value
-- Arg: real register number
ROUTINE registers__get_real
  VAR
    real_flg    :  BOOLEAN
    real_val   :  REAL
    int_val     : INTEGER
    STATUS : INTEGER
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
    CHK_STAT(STATUS)
    IF real_flg = FALSE THEN
      real_val = int_val
    ENDIF
      
    RETURN(real_val)
  END registers__get_real


-- Used for retrieving any number register if unsure of type
-- return a boolean if number is a real number, returns false
-- if number is an integer
ROUTINE registers__get_numreg
  VAR
    real_flg : BOOLEAN
    STATUS : INTEGER
  BEGIN
    real_val = 0.0
    int_val = 0
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
    CHK_STAT(STATUS)
    RETURN(real_flg)
  END registers__get_numreg

-- Get string register value
ROUTINE registers__get_string
  VAR
    str_val	: STRING[100]
    STATUS : INTEGER
  BEGIN
    GET_STR_REG(reg_no, str_val, STATUS)
    CHK_STAT(STATUS)
    
    RETURN(str_val)
  END registers__get_string

-- #########
-- Setters
-- #########

-- set string
-- input SR number "reg_no"
-- input string "str_val"
ROUTINE registers__set_string
  VAR
    STATUS : INTEGER
  BEGIN
    SET_STR_REG(reg_no, str_val, STATUS)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
      ok = FALSE
    ELSE
      ok = TRUE
    ENDIF 
  END registers__set_string

-- Set the comment of a Register or IO
-- input "typ" - type of Register or IO
-- input "Id" - register or IO number
-- input "cmt" - set comment
ROUTINE registers__set_comment
  VAR
    STATUS : INTEGER
  BEGIN

    IF typ = 0 THEN
      karelError(POS_TYPE_MISMATCH,'SET_CMT-wrong type', ER_ABORT)
      ok = FALSE
    ENDIF

    SELECT typ OF
      CASE(DATA_REG):
        SET_REG_CMT(id, cmt, STATUS)
      CASE(DATA_POSREG):
        SET_PREG_CMT(id, cmt, STATUS)
      CASE(DATA_STRING):
        SET_SREG_CMT(id, cmt, STATUS)
      ELSE:
        SET_PORT_CMT(typ, id, cmt, STATUS)
    ENDSELECT

    CHK_STAT(STATUS)
    ok = TRUE
    
  END registers__set_comment

ROUTINE registers__clear_comments
VAR
  id : INTEGER
  STATUS : INTEGER
BEGIN
  IF typ = 0 THEN
    karelError(POS_TYPE_MISMATCH,'SET_CMT-wrong type', ER_ABORT)
    ok = FALSE
  ENDIF

  id = 1
  REPEAT
    SELECT typ OF
      CASE(DATA_REG):
        SET_REG_CMT(id, '', STATUS)
        IF (STATUS = 0) AND reset_reg THEN
          SET_INT_REG(id, 0, STATUS)
        ENDIF
      CASE(DATA_POSREG):
        SET_PREG_CMT(id, '', STATUS)
        IF (STATUS = 0) AND reset_reg THEN
          CLR_POS_REG(id, 0, STATUS)
        ENDIF
      CASE(DATA_STRING):
        SET_SREG_CMT(id, '', STATUS)
        IF (STATUS = 0) AND reset_reg THEN
          SET_STR_REG(id, '', STATUS)
        ENDIF
      ELSE:
        SET_PORT_CMT(typ, id, '', STATUS)
        IF (STATUS = 0) AND reset_reg THEN
          SET_PORT_VAL(typ, id, 0, STATUS)
        ENDIF
    ENDSELECT

    id = id + 1
  UNTIL(status<>0)
END registers__clear_comments

ROUTINE registers__set_int
  VAR
    STATUS : INTEGER
  BEGIN
    SET_INT_REG(reg_no, int_val, STATUS)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
      ok = FALSE
    ELSE
      ok = TRUE
    ENDIF
  END registers__set_int

ROUTINE registers__set_real
  VAR
    STATUS : INTEGER
  BEGIN
    SET_REAL_REG(reg_no, real_val, STATUS)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
      ok = FALSE
    ELSE
      ok = TRUE
    ENDIF
  END registers__set_real

ROUTINE registers__set_io
  VAR
    STATUS : INTEGER
  BEGIN

    IF (typ = 0) OR (typ = DATA_REG) OR (typ = DATA_POSREG) OR &
       (typ = DATA_STRING) THEN
      karelError(POS_TYPE_MISMATCH,'SET_PORT_VAL wrong type', ER_ABORT)
    ENDIF

    IF val THEN
      SET_PORT_VAL(typ, port_no, 1, STATUS)
    ELSE
      SET_PORT_VAL(typ, port_no, 0, STATUS)
    ENDIF
    CHK_STAT(STATUS)

  END registers__set_io


ROUTINE registers__set_boolean
  BEGIN
    registers__set_io(io_flag, flg_no, bool_val)
  END registers__set_boolean

-- #########
-- Checks
-- #########

ROUTINE registers__is_real
  VAR
    real_flg    :  BOOLEAN
      real_val   :  REAL
      int_val     : INTEGER
      STATUS : INTEGER
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
      CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
      ok = FALSE
    ELSE
      ok = TRUE
    ENDIF

    RETURN(real_flg)
  END registers__is_real

ROUTINE registers__is_int
  VAR
    real_flg    :  BOOLEAN
      real_val   :  REAL
      int_val     : INTEGER
      STATUS : INTEGER
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
      CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
      ok = FALSE
    ELSE
      ok = TRUE
    ENDIF
    
    RETURN(NOT real_flg)
  END registers__is_int


-- #########
-- Conversions
-- #########
